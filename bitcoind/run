#!/bin/bash
set -eo pipefail
source /ez/util.sh

# Use external Bitcoin Core node
if [ "$BITCOIND_MODE" == "remote" ]; then
  # Copy externally mounted cookie files into a directory readable by the 'bitcoin' user
  if [ -d /bitcoin ]; then
    mkdir -p /ext_bitcoin
    (cd /bitcoin && cp --parents .$(bitcoind_net_dir $NETWORK)/.cookie /ext_bitcoin) \
      || error bitcoind Cannot find cookie file in mounted datadir
    chown -R bitcoin:bitcoin /ext_bitcoin && chmod -R 550 /ext_bitcoin
  fi

  info bitcoind Using external Bitcoin Core node at $BITCOIND_URL
  info -n bitcoind 'Testing connectivity... '

  bitcoin-cli -rpcwait uptime > /dev/null
  echo >&2 connected.

  # Signal readiness, then abort the service. We don't need it running for external nodes.
  signal_readiness
  abort_service
fi

if [ "$EUID" -eq 0 ]; then
  mkdir -p /data/{bitcoin,fastsync}
  chown bitcoin /data/{bitcoin,fastsync}
  echo $BITCOIND_NETDIR/debug.log > log/location

  # Drop permissions for the rest of the script in a new shell
  exec s6-setuidgid bitcoin $0
fi

! bool_opt "$BITCOIND_TOR" || bool_opt "$TOR" || error bitcoind BITCOIND_TOR requires TOR to be enabled

# Configuration options. A config file can also be mounted into /data/bitcoin/bitcoin.conf
[ $NETWORK == bitcoin ] && : ${PRUNE:=550}
[ $NETWORK == regtest ] && : ${TXINDEX:=1}
: ${PRUNE:=0}
: ${BITCOIND_LISTEN:=0}

BITCOIND_OPTS="$BITCOIND_OPTS -datadir=$BITCOIND_DIR -chain=$BITCOIND_CHAIN
  -prune="$PRUNE" -listen="$BITCOIND_LISTEN" -maxtipage=10800
  $([ -n "$TXINDEX" ] && echo "-txindex=$TXINDEX")
  $([ "$NETWORK" == "regtest" ] && echo "-fallbackfee=0.00001")
  $(bool_opt "$BITCOIND_TOR" && echo "-proxy=127.0.0.1:9050")
  $(bool_opt "$BITCOIND_LOGS" || echo "-printtoconsole=0")"

# Open up the bitcoind rpc for remote access with the given user/pwd
if [ -n "$BITCOIND_RPC_ACCESS" ]; then
  IFS=':' read user pwd <<< "$BITCOIND_RPC_ACCESS"
  [ -n "$pwd" ] || error bitcoind 'BITCOIND_RPC_ACCESS expected in <username>:<password> format'
  info bitcoind "Enabling RPC access on $BIND_ADDR:$BITCOIND_RPC_PORT with username '$user'"
  salt=$(openssl rand -hex 16)
  rpcauth="$user:$salt\$$(echo -n "$pwd" | openssl sha256 -hmac "$salt" | cut -d' ' -f2)"
  BITCOIND_OPTS="$BITCOIND_OPTS -rpcauth=$rpcauth -rpcbind=127.0.0.1
    -rpcbind=$BIND_ADDR -rpcallowip=0.0.0.0/0"
fi

# Sync from trusted snapshot (prunednode.today)
bool_opt "$TRUSTED_FASTSYNC" && source fastsync/fastsync.sh

# Create 'wallets' subdirectory so bitcoind uses it as the -walletdir and groups wallets under it.
# This makes it easier to back them up.
mkdir -p $BITCOIND_NETDIR/wallets

# Spawn background subshell to signal readiness and run some post-initialization code
( (
  # Wait for the RPC to warm up and test connectivity
  pidfile /tmp/bitcoind-rpcwait.pid \
    bitcoin-cli -rpcwait uptime > /dev/null # TODO timeout
  info bitcoind The Bitcoin Core RPC is ready
  chmod g+r $BITCOIND_NETDIR/.cookie

  if [ "$NETWORK" == "regtest" ] && [ "$(bitcoin-cli getblockcount)" -eq 0 ]; then
    info bitcoind Mining some regtest blocks
    bitcoin-cli createwallet miner > /dev/null
    bitcoin-cli generatetoaddress 101 $(bitcoin-cli -rpcwallet=miner getnewaddress) > /dev/null
  fi

  signal_readiness
) &) 1>&2

# Display a few important log messages only when BITCOIND_LOGS is disabled
(bool_opt "$BITCOIND_LOGS" || pidfile /tmp/bitcoind-tldr.pid timeout 1h \
  tail -F -n0 $BITCOIND_NETDIR/debug.log 2> /dev/null \
  | sed -urn 's/^\S+ //g; /^Bitcoin Core version|^Loaded best chain|^Verifying last/p; /^init message: Done/{p;q}' \
  | { while read m; do info bitcoind $m; done; killpidf /tmp/bitcoind-tldr.pid; } &) 1>&2

# Start
info bitcoind Starting Bitcoin Core...
debug bitcoind Config options: $BITCOIND_OPTS
exec bitcoind $BITCOIND_OPTS 2>&1
