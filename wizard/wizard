#!/bin/bash
set -eo pipefail
source /ez/util.sh

export LANG=C.UTF-8
export DIALOGRC=/ez/wizard/dialogrc

DOCKER_NAME=eznode/eznode:next # TODO
BACKTITLE='eznode installation wizard'
DIALOG_WIDTH=78

DEFAULT_HOST_DATADIR=$([ "$HOST_OS" != Windows ] && echo '~/eznode' || echo '$env:AppData\eznode')

wizard() {
  check_datadir_mounted
  check_existing_config

  echo -e '# Auto-generated by the eznode installation wizard\n' > /data/config.wizard-in-progress

  # Gets modified by the config_* functions below
  service_ports=()
  docker_args=''

  # Run the wizard's steps
  steps \
    welcome_screen \
    config_network \
    config_node \
    config_services \
    config_access \
    config_auth \
    config_startup

  # Write configurations and display them to the user
  mv --backup=t /data/config.wizard-in-progress /data/config

  echo -e "\n\n ${BOLD}Your eznode is ready to go! The following options were written to the config file:${RESTORE}\n"
  tail -n+3 /data/config \
    | sed -r 's/^(AUTH_TOKEN|BITCOIND_AUTH)=.*/\1=*******/; s/^/    /'
  echo

  # Prepare the 'docker run' command and write it to the 'ez-start' file
  local docker_args=$(sed -r 's/ +/ /g; s/^ | $//g' <<< $docker_args)
  local docker_cmd="docker run --name ez -v __DATADIR__:/data $docker_args $DOCKER_NAME"
  make_start_script "$docker_cmd"

  # If no special options are needed for `docker run`, we can start straight ahead
  if [ "$docker_args" == "-it --rm" ]; then
    read -p " ${BOLD}Press any key to start...${RESTORE}"

  # Otherwise, instruct the user to re-start the docker container
  else
    local terminal_cmd=${docker_cmd/__DATADIR__/"${UNDER}$DEFAULT_HOST_DATADIR${UNDER_R}"}
    if [[ $docker_args == *"-d --restart"* ]]; then
      terminal_cmd="$terminal_cmd && docker logs -f ez"
    fi

    if [ -f /data/ez-start ]; then
      echo " ${BOLD}You can start eznode by running the ${LGREEN}ez-start${RESTORE}${BOLD} script that was created in your data directory,${RESTORE}"
      echo " ${BOLD}or by copy-pasting the following command:${RESTORE}"
    else
      echo " ${BOLD}Copy and run the following command to start eznode:${RESTORE}"
    fi
    echo -e "\n    ${BOLD}${LGREEN}$terminal_cmd${RESTORE}\n"
    echo -n " (Change ${BOLD}${LGREEN}${UNDER}$DEFAULT_HOST_DATADIR${RESTORE} in the command if you‚Äôre re using a different data directory."
    echo -e " It should match the one used to start the wizard.)\n"
    exit 5
  fi
}

check_datadir_mounted() {
  # Check /data was mounted. This is where the config file gets written to.
  if ! mountpoint -q /data ; then
    echo -e "\n ${RED}ERROR:${RESTORE} Data directory not mounted. Run with ${BOLD}${LGREEN}-v ${UNDER}/path/on/host${UNDER_R}:/data${RESTORE} to mount it. For example:\n
      ${BOLD}${LGREEN}docker run --name ez -v ${UNDER}$DEFAULT_HOST_DATADIR${UNDER_R}:/data -it --rm $DOCKER_NAME wizard${RESTORE}\n"
    exit 1
  fi
}

check_existing_config() {
  [ ! -f /data/config ] || yesno "Overwrite config?" \
    "An existing config file was found in /data/config. Running the wizard will remove it and replace it with the new configuration. Do you wish to\nproceed?" \
    "Yes, overwrite config" \
    "No, abort wizard" \
    --defaultno
}

make_start_script() {
  # TODO windows bat/powershell file
  [ $HOST_OS == Windows ] && return 0

  local cmd=${1/__DATADIR__/'"$own_dir"'}' "$@"'

  # Run in background, then start live-tailing logs (if TTY).
  # Attempts to revive the previously started container first.
  if [[ $cmd == *"-d --restart"* ]]; then cat << EOF
#!/bin/sh -e
own_dir=\$(cd "\$(dirname "\$0")" && pwd)

docker start ez 2> /dev/null ||
$cmd

[ -t 0 -a -t 1 ] && exec docker logs -n50 -f ez
EOF

  # Run in foreground
  else cat << EOF
#!/bin/sh -e
own_dir=\$(cd "\$(dirname "\$0")" && pwd)
exec $cmd
EOF

  fi > /data/ez-start

  echo -e '#!/bin/sh\nexec docker stop ez' > /data/ez-stop

  chmod 755 /data/ez-start /data/ez-stop
}

welcome_screen() {
  yesno "eznode ‚Äì a simple personal bitcoin node setup" "\
Welcome to the eznode installation wizard!
The wizard will help prepare\nyour configuration file and the docker run command for starting eznode.\n\n\
You can navigate with the keyboard or using the mouse.
Press ESC to go\nback to the previous step, or Ctrl-C to abort the wizard.\n\n
For more information and help, refer to the user guide at https://ezno.de" \
    "Continue" \
    "Cancel"
}

# Node configurations

config_network() {
  local network; network=$(menu "Network Selection" \
      "Which network would you like to use?" \
      bitcoin "Bitcoin Mainnet" \
      signet "Signet" \
      testnet "Testnet" \
      regtest "Regtest") \
    || return $?
  configure NETWORK $network
}

config_node() {
  local selection; selection=$(menu "Full Node Setup" \
      "Do you already have a Bitcoin Core full node?" \
      no     "Not yet, let‚Äôs set one up!" \
      local  "Yes, running on the same machine alongside eznode (cookie-based auth)" \
      remote "Yes, running on a remote machine (username/password-based auth)") \
    || return $?
  is_midstep=1

  case $selection in
    no)     config_node_internal ;;
    local)  config_node_external_local ;;
    remote) config_node_external_remote ;;
  esac
}

config_node_internal() {
  config_pruning
  # TODO remote rpc access (BITCOIND_RPC_ACCESS)
  # TODO connect through tor
}

config_node_external_local() {
  local default_dir=$(case $HOST_OS in
    Linux)   echo '~/.bitcoin' ;;
    Windows) echo '$env:AppData\Bitcoin' ;;
    macOS)   echo '~/Library/Application Support/Bitcoin' ;;
  esac)

  local bitcoind_dir; bitcoind_dir=$(input "Full Node Setup" "\
What is the path to your Bitcoin Core data directory?\n\n\
If you‚Äôre unsure, the default should work." "$default_dir") \
    || return $?

  docker_args="$docker_args -v $(escape "$bitcoind_dir:/bitcoin:ro")"

  if [ $HOST_OS == Linux ]; then
    # Needed on Linux to make the host's virtual IP address discoverable within the container.
    # This is the default Windows/macOS.
    docker_args="$docker_args --add-host host.docker.internal:host-gateway"
  fi
}

config_node_external_remote() {
  local url; url=$(input "Full Node Setup" \
    "What is the URL of your Bitcoin Core RPC server?" \
    "http://<host>:<port>/") || return $?
  local auth; auth=$(input "Full Node Setup" \
    "Enter your Bitcoin Core RPC credentials:" \
    "<user>:<password>") || return $?
  configure BITCOIND_URL "$url"
  configure BITCOIND_AUTH "$auth"
}

#config_node_access() {
#  case $(menu "Full node setup" \
#         "Would you like to expose the Bitcoin Core RPC for password-based access?
#          This allows connecting external apps like Sparrow or Fully Noded" \
#         no "No" \
#         onion "Yes, over Onion" \
#         local "Yes, for local access")
#}

config_pruning() {
  [ $(getconf NETWORK) == bitcoin ] || return 0

  local selection; selection=$(menu "Full Node Pruning" "\
Would you like to enable pruning to reduce your full node‚Äôs storage\nrequirements?\n\n\
See https://ezno.de/getting-started#pruning for more information." \
      minimal "Yes, prune to the minimal size (~5GB, can fast-sync)"  \
      bydate  "Yes, prune blocks before a given date" \
      no      "No, setup a fully archival node (~400GB)") \
    || return $?
  case $selection in
    # minimal (PRUNE=550) is the default and therefore doesn't require setting anything
    minimal) config_fastsync ;;
    bydate)  config_pruning_by_date ;;
    no)      configure PRUNE 0 ;;
  esac
}

config_pruning_by_date() {
  local date; date=$(input "Full Node Pruning" "\
Enter the pruning target as a YYYY-MM-DD formatted date.\n\n\
Blocks before this date will be discarded once they‚Äôre verified. You will\n\
retain the ability to scan for historical wallet transaction activity\n\
after this date." "") || return $?
  if [[ ! $date =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
    msgbox 'Invalid date' 'The date was not provided as a YYYY-MM-DD string. Please try again.'
    config_pruning_by_date
  else
    configure PRUNE_UNTIL $date
  fi
}

config_fastsync() {
  if yesno "Full Node Fast-Sync" "\
Would you like to enable the ùòõùòôùòúùòöùòõùòåùòã fast-sync mode?\n\n\
This will download a recent data dir snapshot from www.prunednode.today\n\
and start syncing from that, without verifying the full chain history.\n\n\
This can get your node synced up in 20-90 minutes, but requires ùòµùò≥ùò∂ùò¥ùòµùò™ùòØùò®\n\
the distributor of the snapshot. A malicious distributor could feed you\n\
with invalid chain history and fool you into accepting fake coins. Please\n\
consider waiting some more for a full sync to avoid taking this risk.\n\n\
A fast-synced node is also unable to scan for your wallet‚Äôs historical\n\
transaction activity, and can therefore only be used with newly created\n\
wallets.\n\n\
See https://ezno.de/packages#fast-sync for more information." \
      "Enable Fast-Sync" \
      "Don‚Äôt Trust, Verify" \
      --defaultno; then
    configure TRUSTED_FASTSYNC 1
  elif [ $? -eq 255 ]; then return 255 # ESC
  fi
}

# Services configuration

config_services() {
  local services; services=$(checklist "Services Configuration" "\
Which services would you like to use? Select them using the space bar or\nthe mouse.\n\n\
See https://ezno.de/packages for more information." \
      explorer "Block Explorer"  ON \
      electrum "Electrum Server (Personal)" OFF \
      specter  "Specter Desktop" OFF \
      bwt-http "BWT HTTP API"    OFF) \
    || return $?
  is_midstep=1

  if [[ $services == *explorer* ]]; then
    configure EXPLORER 1
    service_ports+=( 3002 )
  else
    # On by default, so needs to be turned off
    configure EXPLORER 0
  fi

  if [[ $services == *specter* ]]; then
    configure SPECTER 1
    service_ports+=( 25441 )
  fi

  if [[ $services == *electrum* ]] || [[ $services == *bwt-http* ]];  then
    # The BWT service is enabled by default and remains so even when electrum/btw-http aren't selected,
    # because its also used to manage the PRUNE_UNTIL setting and to provide other utilities.
    config_bwt_wallets || return $?
  fi
  if [[ $services == *electrum* ]]; then
    service_ports+=( 50001 )
  fi
  if [[ $services == *bwt-http* ]]; then
    service_ports+=( 3060 )
  fi
}

config_bwt_wallets() {
  local tfile=$(mktemp --suffix bwt-wallets)
  echo -e '# Enter your wallet‚Äôs xpubs/ypubs/zpubs/descriptors below (one per line)\n\n' >> $tfile
  local wallets; wallets=$(editbox "Wallets Configuration" $tfile \
    | sed -r 's/^\s+|\s+$//g' \
    | { grep '^[^#]' || true; }) \
    || return $?
  rm $tfile

  local xpub_counter=1
  local desc_counter=1
  while read wallet; do
    if [[ $wallet =~ ^[a-zA-Z0-9]+$ ]]; then
      configure XPUB_$xpub_counter "$wallet"
      ((xpub_counter++))
    elif [ -n "$wallet" ]; then
      configure DESCRIPTOR_$desc_counter "$wallet"
      ((desc_counter++))
    fi
  done <<< $wallets
  # TODO check validity
}

# Access configuration

config_access() {
  if contains 50001 ${service_ports[@]}; then
    local electrum_enabled=1
    local electrum_note="\
Note that the Electrum server cannot be accessed remotely through SSL,\n\
only through Onion/SSH or locally.\n\n"
    local docs_section='#connecting-remotely'
  fi

  local transports; transports=$(checklist "Access Configuration" "\
How would you like to access the eznode services?\n\n${electrum_note}\
See https://ezno.de/accessing$docs_section for more information." \
      local "Locally from the same machine" ON \
      lan   "Locally over a secure LAN"     OFF \
      onion "Remotely over Tor Onion"       OFF \
      ssh   "Remotely over SSH tunnels"     OFF \
      ssl   "Remotely over SSL"             OFF) \
    || return $?
  is_midstep=1

  if [[ $transports == *ssl* ]]; then
    configure SSL 1
    docker_args="$docker_args -p 443:3443"
    if [ -n "$electrum_enabled" ]; then
      service_ports+=( 50002 )
    fi
    config_ssl_cert || return $?
  fi

  if [[ $transports == *lan* ]]; then
    config_lan_interface || return $?
  fi

  if [[ $transports == *local* ]]; then
    config_local_access || return $?
  fi

  if [[ $transports == *onion* ]]; then
    configure TOR 1
  fi

  if [[ $transports == *ssh* ]]; then
    configure SSHD 1
    docker_args="$docker_args -p 2222:2222 -h ez"
    # TODO setup authorized ssh keys
  fi
}

config_ssl_cert() {
  if yesno "SSL Setup" "\
Would you like to obtain a CA-signed SSL certificate using Let‚Äôs Encrypt?\n\n\
This requires a (sub)domain name pointed at your server." \
         "Yes, enable Let‚Äôs Encrypt" \
         "No, use a self-signed cert" \
         --defaultno; then
    local domain; domain=$(input "SSL setup" \
      "Enter your (sub)domain name. It should point to the IP address of your\neznode server.") \
      || return $?
    if [ -n "$domain" ]; then
      configure SSL_DOMAIN "$domain"
      # Port 80 needs to be exposed for the Let's Encrypt verification process
      docker_args="$docker_args -p 80:8080"
    else
      msgbox "SSL setup" "No domain provided. Please try again."
      config_ssl_cert
    fi
  elif [ $? -eq 255 ]; then return 255 # ESC
  fi
}

config_lan_interface() {
  lan_address=$(input "LAN Access" "\
Which IP address should the services listen on for LAN access?\n\n\
You can use 0.0.0.0 to bind on all available network interfaces if your\n\
eznode server is behind a LAN (typically the case for home setups with\n\
routers). The LAN should be private and secure.\n\n\
If your server is connected directly to the internet (typically the case\n\
with VPS) or to multiple LANs, the bind address should be set more\n\
restrictively to avoid exposing your server to unwanted access.\n\n\
To disable LAN access, leave this field empty." \
    0.0.0.0) || return $?
  if [ -n "$lan_address" ]; then
    # 0.0.0.0 is the default, omit it from the command
    local addr_param=$([ "$lan_address" == 0.0.0.0 ] || echo "$lan_address:")
    # Bind all the services' ports on the LAN interface address
    for port in ${service_ports[@]}; do
      docker_args="$docker_args -p $addr_param$port:$port"
    done
  fi
}

config_local_access() {
  # On Windows/macOS we have to bind the services on 127.0.0.1 to make them accessible from the host.
  # This isn't needed if they're already bound on 0.0.0.0 for LAN access.
  if [[ ( $HOST_OS == Windows || $HOST_OS == macOS ) && "$lan_address" != 0.0.0.0 ]]; then
    for port in ${service_ports[@]}; do
      docker_args="$docker_args -p 127.0.0.1:$port:$port"
    done
  fi

  if [ $HOST_OS == Linux ] && yesno "Local Access" "\
Would you like to setup an /etc/hosts hostname entry for 'ez', to enable\n\
easier local access to the services?\n\n\
For example, the block explorer will be available at http://ez:3002/" \
      Yes No \
      --defaultno; then
    docker_args="$docker_args -v /etc/hosts:/ez/hosts"
  elif [ $? -eq 255 ]; then return 255 # ESC
  fi
}

config_auth() {
  if contains 50001 ${service_ports[@]}; then
    local electrum_note="\
Note that the Electrum server will remain unauthenticated. Using it\n\
securely over the internet requires an authenticated transport layer.\n\n"
  fi

  local token; token=$(password "Setup Authentication" "\
Would you like to setup password-based authentication?\n\n\
Enter a password to enable it, or leave it empty to disable it.\n\n\
This is highly advisable if the eznode services are exposed directly to\n\
the internet. If you‚Äôre only accessing them locally or over an\n\
authenticated transport layer like SSH or Tor, it may be unnecessary.\n\n\
${electrum_note}\
See https://ezno.de/accessing#authentication for more information.") \
    || return $?
  if [ -n "$token" ]; then
    local token2; token2=$(password "Authentication" "Enter your password again:" --nocancel) \
      || return $?
    if [ "$token" != "$token2" ]; then
      msgbox 'Invalid password' 'The passwords do not match. Please try again.'
      config_auth
    else
      configure AUTH_TOKEN "$token"
    fi
  elif bool_opt "$(getconf SSL)"; then
    yesno "Authentication" "\
Remote access via SSL was enabled, but no password was set.\n\n\
Exposing the SSL web server directly to the internet without setting a\n\
password is INSECURE.\n\n\
Are you sure you wish to proceed without a password?" \
     "Yes, I know what I‚Äôm doing" \
     "No, go back" --defaultno || config_auth
  fi
}

config_startup() {
  if yesno "Run on startup" \
       "Would you like eznode to run in the background and added to startup?" \
       "Yes, add to startup" \
       "No, I will start it manually" \
       --defaultno; then
    docker_args="-d --restart unless-stopped $docker_args"
  elif [ $? -eq 255 ]; then return 255 # ESC
  else
    docker_args="-it --rm $docker_args"
  fi
}

#
# Utilities
#

configure() {
  echo "$1=$(escape "$2")" >> /data/config.wizard-in-progress
}

getconf() {
  (source /data/config.wizard-in-progress && echo "${!1}")
}

escape() {
  # quote/escape strings with spaces or other special characters that require it
  [[ $1 =~ [^a-zA-Z0-9._:/+@~-] ]] && echo "${1@Q}" || echo "$1"
}

diag() {
  dialog --backtitle "$BACKTITLE" "$@"
  local ret=$?
  # Exit on dialog error
  [ $ret -eq -1 ] && exit $ret
  return $ret
}

yesno() {
  local text='\n'$2
  local height=$(($(count_newlines "$text") + 6))
  diag --title " $1 " "${@:5}" \
     --yes-button "${3:-Yes}" --no-button "${4:-No}" \
     --yesno "$text" $height $DIALOG_WIDTH
  # TODO back button?
}

menu() {
  local text='\n'$2
  local num_options=$((($# - 2) / 2))
  local height=$(($num_options + $(count_newlines "$text") + 7))
  diag --title " $1 " --notags \
    --cancel-label Back \
    --menu "$text" $height $DIALOG_WIDTH $num_options \
    "${@:3}" \
    3>&1 1>&2 2>&3 # swap STDOUT and STDERR
}

checklist() {
  local text='\n'$2
  local num_options=$((($# - 2) / 3))
  local height=$(($num_options + $(count_newlines "$text") + 7))
  diag --title " $1 " --notags \
    --cancel-label Back \
    --checklist "$text" $height $DIALOG_WIDTH $num_options \
    "${@:3}" \
    3>&1 1>&2 2>&3
}

inputlike() {
  local text='\n'$3
  local height=$(($(count_newlines "$text") + 8))
  diag --title " $2 " "${@:5}" \
    --cancel-label Back \
    --$1 "$text" $height $DIALOG_WIDTH "$4" \
    3>&1 1>&2 2>&3
}

input() { inputlike inputbox "$@"; }

password() { inputlike passwordbox "$1" "$2" "" --insecure "${@:3}"; }
# 'insecure' means that the length will be visible

msgbox() {
  local text='\n'$2
  local height=$(($(count_newlines "$text") + 6))
  diag --title " $1 " "${@:4}" \
    --cancel-label Back \
    --ok-label "${3:-OK}" \
    --msgbox "$text" $height $DIALOG_WIDTH
}

editbox() {
  diag --title " $1 " "${@:4}" \
    --cancel-label Back \
    --editbox "$2" "${3:-15}" $DIALOG_WIDTH \
    3>&1 1>&2 2>&3
}

count_newlines() { grep -o '\\n' <<< "$1" | wc -l; }

contains() {
  local needle="$1"; shift
  for item in "$@"; do
    [[ "$item" == "$needle" ]] && return 0
  done
  return 1
}

steps() {
  local recovery_dir=$(mktemp -d)
  local steps=("$@")
  local step=0

  while [ "${steps[step]}" ]; do
    # Restore config and vars when going back to a previous step
    local step_recovery=$recovery_dir/$step
    if [ -f $step_recovery-config ]; then
      cp $step_recovery-config /data/config.wizard-in-progress
      source $step_recovery-vars
    else
      cp /data/config.wizard-in-progress $step_recovery-config
      declare -p docker_args service_ports | sed -r 's/^(declare -)-/\1/;s/^(declare -)/\1g/' \
        > $step_recovery-vars
      # the `sed` adds `-g` to make the variable declarations global
    fi

    # Run step
    is_midstep=0
    if ${steps[$step]}; then
      ((++step))
    else
      # When is_midstep, go back to the beginning of the current step.
      # Otherwise, go back to the previous step.
      if [ $is_midstep -eq 0 ]; then
        rm $step_recovery-*
        ((step--))
      fi
    fi
  done
  rm -r $recovery_dir
}

if [ "${BASH_SOURCE[0]}" == "$0" ]; then
  wizard
fi